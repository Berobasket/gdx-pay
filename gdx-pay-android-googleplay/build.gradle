apply plugin: 'com.android.library'
apply plugin: 'de.mobilej.unmock'

apply from : '../publish_android.gradle'

sourceCompatibility = 1.7
targetCompatibility = 1.7

android {
    defaultPublishConfig "release"

    compileSdkVersion androidCompileSdkVersion
    buildToolsVersion androidBuildToolsVersion

    defaultConfig {
        minSdkVersion androidMinimalSdkVersion
        targetSdkVersion androidTargetSdkVersion
        testInstrumentationRunner "android.test.InstrumentationTestRunner"
        testOptions {
            unitTests.returnDefaultValues = true
        }
    }
}

configurations {
    compileAndIncludeClassesInLibraryJar
    compile.extendsFrom compileAndIncludeClassesInLibraryJar
}

dependencies {
    testCompile libraries.junit
    testCompile libraries.mockito_core
    testCompile libraries.libgdx_platform_natives_desktop
    testCompile libraries.assertj_core
    compile libraries.libgdx_backend_android
    compile project(':gdx-pay-client')
    compile libraries.jsr305

    compile libraries.support_v4

    // dependency to android-all to use
    unmock 'org.robolectric:android-all:4.3_r2-robolectric-0'
}

tasks.withType(Test) {
    scanForTestClasses = true
    include "**/*Test.class" // Ignore non-test classes, Android Gralde plugin tries to execute non-test classes too.
}

unMock {
    keep "android.widget.BaseAdapter"
    keep "android.widget.ArrayAdapter"
    keep "android.os.Bundle"
    keepStartingWith "android.database.MatrixCursor"
    keep "android.database.AbstractCursor"
    keep "android.database.CrossProcessCursor"
    keepStartingWith "android.text.TextUtils"
    keepStartingWith "android.util."
    keepStartingWith "android.text."
    keepStartingWith "android.content.IIntentSender"
    keepStartingWith "android.content.IIntentReceiver"
    keepStartingWith "android.content.ContentValues"
    keepStartingWith "android.content.ComponentName"
    keepStartingWith "android.content.ContentUris"
    keepStartingWith "android.content.ContentProviderOperation"
    keepStartingWith "android.content.ContentProviderResult"
    keepStartingWith "android.content.UriMatcher"
    keepStartingWith "android.content.Intent"
    keep "android.location.Location"
    keepStartingWith "android.content.res.Configuration"
    keepStartingWith "org."
    keepStartingWith "libcore."
    keepStartingWith "com.android.internal.R"
    keepStartingWith "com.android.internal.util."
    keep "android.net.Uri"

    keepAndRename "java.nio.charset.Charsets" to "xjava.nio.charset.Charsets"
}

//Execute "gradle clean jarRelease" to create jar manually
android.libraryVariants.all { variant ->
    def name = variant.buildType.name
    if (name.equals(com.android.builder.core.BuilderConstants.DEBUG)) {
        return; // Skip debug builds.
    }
    def task = project.tasks.create "jar${name.capitalize()}", Jar
    task.dependsOn variant.javaCompile
    task.from variant.javaCompile.destinationDir
    artifacts.add('archives', task);
}

